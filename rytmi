from ursina import *
import pymunk
from pymunk import Vec2d
from random import randint, uniform
import pymunk.autogeometry
import pymunk.pygame_util
import pygame 
from particle_system import ParticleSystem
import time

app = Ursina()

space = pymunk.Space()
space.gravity = 0.0, -9.81*100
balls = []
ball_entities = []
score = 0
reaction_time = 0.1

start_time = time.time()

pygame.mixer.init()
pygame.mixer.music.load('your_song.mp3')
pygame.mixer.music.play()

def convert_pos(x, y):
    return x * window.size.x, y * window.size.y
def pymunk_pos_to_ursina(x, y):
    return x / window.size.x, y / window.size.y


def create_projectile(position, collision_type):
    body = pymunk.Body(20, 100)
    body.position = position
    shape = pymunk.Circle(body, 10, (0, 0))
    shape.friction = 0.5
    shape.collision_type = collision_type  # Set the collision type for Pymunk balls
    space.add(body, shape)
    balls.append(shape)
    body.apply_impulse_at_local_point((0, 25000), (0, 0))
    ball_entities.append(Entity(
            model=Circle(radius=shape.radius/500, resolution=10),
            color=color.rgb(randint(0, 255), randint(0, 255), randint(0, 255)),
            position=body.position,
            parent=camera.ui
        )
    )

def create_ball(position, collision_type,beat_time):
    body = pymunk.Body(10, 100)
    body.position = position
    shape = pymunk.Circle(body, 10, (0, 0))
    shape.friction = 0.5
    shape.collision_type = collision_type  # Set the collision type for Pymunk balls
    space.add(body, shape)
    balls.append(shape)
    ball_entities.append(Entity(
            model=Circle(radius=shape.radius/500, resolution=10),
            color=color.rgb(randint(0, 255), randint(0, 255), randint(0, 255)),
            position=body.position,
            parent=camera.ui
        )
    )

# Your beat times in seconds
beat_times = [ 4.156371882086168, 4.73687074829932, 5.294149659863946, 5.874648526077097, 6.408707482993197, 
              6.989206349206349, 7.569705215419501, 8.17342403628118, 8.753922902494331, 9.357641723356009, 9.914920634920636, 10.47219954648526, 
              11.00625850340136, 11.54031746031746, 12.07437641723356, 12.60843537414966, 13.212154195011339, 13.79265306122449, 14.373151927437641, 
              14.953650793650795, 15.51092970521542, 16.068208616780044, 16.62548752834467, 17.205986394557822, 17.76326530612245, 18.3437641723356, 
              18.877823129251702, 19.458321995464853, 20.06204081632653, 20.619319727891156, 21.176598639455783, 21.73387755102041, 
              22.291156462585032, 22.871655328798187, 23.42893424036281, 23.962993197278912, 24.49705215419501, 25.054331065759637, 25.588390022675735, 26.16888888888889, 
              26.70294784580499, 27.237006802721087, 27.77106575963719, 28.328344671201815, 28.83918367346939, 29.373242630385487, 29.88408163265306, 30.418140589569163, 
              30.928979591836736, 31.43981859410431, 32.02031746031746, 32.57759637188209, 33.111655328798186, 33.645714285714284, 34.202993197278914, 34.73705215419501, 
              35.294331065759636, 35.80517006802721, 36.31600907029478, 36.85006802721088, 37.36090702947846, 37.89496598639456, 38.45224489795918, 38.963083900226756, 
              39.497142857142855, 40.03120181405896, 40.56526077097506, 41.07609977324263, 41.61015873015873, 42.120997732426304, 42.67827664399093, 43.165895691609975, 43.67673469387755]

first_of_four = [4.156371882086168, 6.408707482993197, 8.753922902494331, 11.00625850340136, 13.212154195011339, 15.51092970521542, 17.76326530612245, 20.06204081632653, 22.291156462585032, 24.49705215419501, 26.70294784580499, 28.83918367346939, 30.928979591836736, 33.111655328798186,  35.294331065759636, 37.36090702947846, 39.497142857142855, 41.61015873015873, 43.67673469387755]
second_of_four = [4.73687074829932, 6.989206349206349, 9.357641723356009, 11.54031746031746, 13.79265306122449, 16.068208616780044, 18.3437641723356, 20.619319727891156, 22.871655328798187, 25.054331065759637, 27.237006802721087, 29.373242630385487, 31.43981859410431, 33.645714285714284, 35.80517006802721, 37.89496598639456, 40.03120181405896, 42.120997732426304]
third_of_four = [5.294149659863946, 7.569705215419501, 9.914920634920636, 12.07437641723356, 14.373151927437641, 16.62548752834467, 18.877823129251702,21.176598639455783, 23.42893424036281, 25.588390022675735, 27.77106575963719, 29.88408163265306, 32.02031746031746, 34.202993197278914, 36.31600907029478, 38.45224489795918, 40.56526077097506, 42.67827664399093]
four_of_four = [5.874648526077097, 8.17342403628118, 10.47219954648526, 12.60843537414966, 14.953650793650795, 17.205986394557822, 19.458321995464853, 21.73387755102041, 23.962993197278912, 26.16888888888889, 28.328344671201815, 30.418140589569163, 32.57759637188209, 34.73705215419501, 36.85006802721088, 38.963083900226756, 41.07609977324263, 43.165895691609975]


W_key = Text(text='W', scale=2, y=-0, origin=(0, 0), background=False)
W_key.x = -0.16

A_key = Text(text='A', scale=2, y=-0, origin=(0, 0), background=False)
A_key.x = -0.06

S_key = Text(text='S', scale=2, y=-0, origin=(0, 0), background=False)
S_key.x = 0.06

D_key = Text(text='D', scale=2, y=-0, origin=(0, 0), background=False)
D_key.x = 0.16


def change_W_color(beat_time):
    W_key.color = color.random_color()

def change_W_white(beat_time):
    W_key.color = color.rgb(255, 255, 255)
	
def change_A_color(beat_time):
    A_key.color = color.random_color()

def change_A_white(beat_time):
    A_key.color = color.rgb(255, 255, 255)
	
def change_S_color(beat_time):
    S_key.color = color.random_color()

def change_S_white(beat_time):
    S_key.color = color.rgb(255, 255, 255)

def change_D_color(beat_time):
    D_key.color = color.random_color()

def change_D_white(beat_time):
    D_key.color = color.rgb(255, 255, 255)

firs_pos =  (250, 450)
second_pos = (100,450)
third_pos = (-100,450)
fourth_pos = (-250,450)

COLLISION_ONE_PROJECTILE = 1
COLLISION_TWO_PROJECTILE = 2
COLLISION_THREE_PROJECTILE = 3
COLLISION_FOUR_PROJECTILE = 4
COLLISION_FIVE = 5
COLLISION_SIX = 6
COLLISION_SEVEN = 7
COLLISION_EIGHT = 8


def score_counter():
    global score
    score += 1
    score_text.text = f'Score: {score}'

def collision_callback(arbiter, space, data):
    # Get the colliding shapes
    shape_a, shape_b = arbiter.shapes

    # Find the corresponding balls for the colliding shapes
    ball_a = next((ball for ball in balls if ball.body == shape_a.body), None)
    ball_b = next((ball for ball in balls if ball.body == shape_b.body), None)

    # Check if both balls were found
    try:
        if ball_a is not None and ball_b is not None:
            # Remove the colliding shapes from the space
            space.remove(shape_a, shape_b)

            # Remove the corresponding balls from the list
            balls.remove(ball_a)
            balls.remove(ball_b)

            # Destroy any associated entities
            destroy(ball_entities[balls.index(ball_a)])
            destroy(ball_entities[balls.index(ball_b)])

            # Remove the corresponding entities from the list
            ball_entities.pop(balls.index(ball_a))
            ball_entities.pop(balls.index(ball_b))
    except:
        pass

handler0 = space.add_collision_handler(COLLISION_ONE_PROJECTILE, COLLISION_FIVE)
handler1 = space.add_collision_handler(COLLISION_TWO_PROJECTILE, COLLISION_SIX)
handler2 = space.add_collision_handler(COLLISION_THREE_PROJECTILE, COLLISION_SEVEN)
handler3 = space.add_collision_handler(COLLISION_FOUR_PROJECTILE, COLLISION_EIGHT)

handler0.post_solve = collision_callback
handler1.post_solve = collision_callback
handler2.post_solve = collision_callback
handler3.post_solve = collision_callback


for beat_time in first_of_four:
    invoke(change_W_white, beat_time=beat_time, delay=beat_time)
    invoke(change_D_color, beat_time=beat_time, delay=beat_time)
    invoke(create_ball,position=firs_pos, collision_type = COLLISION_FIVE, beat_time=beat_time, delay=beat_time)
for beat_time in second_of_four:
    invoke(change_S_color, beat_time=beat_time,  delay=beat_time)
    invoke(change_D_white, beat_time=beat_time, delay=beat_time)
    invoke(create_ball, position=second_pos, collision_type = COLLISION_SIX, beat_time=beat_time, delay=beat_time)
for beat_time in third_of_four:
    invoke(change_S_white, beat_time=beat_time, delay=beat_time)
    invoke(change_A_color, beat_time=beat_time, delay=beat_time)
    invoke(create_ball, position=third_pos, collision_type = COLLISION_SEVEN, beat_time=beat_time, delay=beat_time)
for beat_time in four_of_four:
    invoke(change_A_white, beat_time=beat_time, delay=beat_time)
    invoke(change_W_color, beat_time=beat_time, delay=beat_time)
    invoke(create_ball,position=fourth_pos, collision_type = COLLISION_EIGHT,  beat_time=beat_time, delay=beat_time)


score_text = Text(text='0', origin=(0.5, -0.5), background=False, y=0.4)


def input(key):
    current_time = time.time() - start_time

    if key == 'd':
        create_projectile(position=(250, -450), collision_type= COLLISION_ONE_PROJECTILE)
        for beat_time in beat_times:
            if abs(current_time - beat_time) < reaction_time:
                invoke(score_counter)
    if key == 's':
        create_projectile(position=(100, -450), collision_type= COLLISION_TWO_PROJECTILE)
        for beat_time in beat_times:
            if abs(current_time - beat_time) < reaction_time:
                invoke(score_counter)

    if key == 'a':
        create_projectile(position=(-100, -450), collision_type= COLLISION_THREE_PROJECTILE)
        for beat_time in beat_times:
            if abs(current_time - beat_time) < reaction_time:
                invoke(score_counter)

    if key == 'w':
        create_projectile(position=(-250, -450), collision_type= COLLISION_FOUR_PROJECTILE)
        for beat_time in beat_times:
            if abs(current_time - beat_time) < reaction_time:
                invoke(score_counter)



    
    
        


def update():

    for i, ball in enumerate(balls):
        ball_position = pymunk_pos_to_ursina(ball.body.position.x, ball.body.position.y)
        if ball_position[0] > 1 or ball_position[0] < -1 or ball_position[1] < -1:
            balls.pop(i)
            space.remove(ball)
            destroy(ball_entities[i])
            ball_entities.pop(i)
        else:
            ball_entities[i].position = ball_position
    space.step(1 / 60)

# Run the Ursina app
app.run()
